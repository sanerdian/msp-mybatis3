package ${package.Entity};

#foreach($pkg in ${table.importPackages})
import ${pkg};
#end
#if(${swagger2})
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.alibaba.fastjson.annotation.JSONField;
import com.baomidou.mybatisplus.annotation.IdType;
#end
#if(${entityLombokModel})
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.experimental.Accessors;
#end
import com.baomidou.mybatisplus.annotation.*;
import org.thenicesys.data.api.EntityId;
import org.thenicesys.data.api.Pager;
import org.thenicesys.fastjson.serializer.ToStringSerializer;
import com.alibaba.excel.annotation.ExcelIgnore;
import com.alibaba.excel.annotation.ExcelProperty;

import java.util.Date;

import org.springframework.format.annotation.DateTimeFormat;
import java.util.List;
#foreach($field in ${table.fields})
#if(${field.matchType} < 0)
import ${package.parent}.${field.jointablePackage}.model.${field.capitalJointable};
#end
#end

/**
 * <p>
 * $!{table.comment}
 * </p>
 *
 * @author ${author}
 * @since ${date}
 */
#if(${entityLombokModel})
@Data
#if(${superEntityClass})
//@EqualsAndHashCode(callSuper = true)
#else
//@EqualsAndHashCode(callSuper = false)
#end
//@Accessors(chain = true)
#end
#if(${table.convert})
@TableName("${table.name}")
#end
#if(${swagger2})
@ApiModel(value = "${entity}对象", description = "$!{table.comment}")
#end
#if(${superEntityClass})
public class ${entity} #if(${table.tType} == 0)extends ${superEntityClass} implements EntityId<#if(${table.tType} == 0)${keyField.propertyType}#else Long #end> #end #if(${activeRecord})<${entity}>#end{
#elseif(${activeRecord})
public class ${entity} extends Model<${entity}> {
#else
public class ${entity} implements Serializable{
#end

    private static final long serialVersionUID=1L;

## ----------  BEGIN 字段循环遍历  ----------

#foreach($field in ${table.fields})
#if($null.isNull(${field.matchType}) || ${field.matchType} == 0 || ${field.matchType}>0)
#if(${field.keyFlag})
#set($keyPropertyName=${field.propertyName})
#end
#if("$!field.comment" != "")
    @ExcelProperty(value = "${field.comment}")
#if(${swagger2})
    @ApiModelProperty(value = "${field.comment}")
#else
/**
 *   ${field.comment}
*/
#end
#end
#if(${field.keyFlag})
#if("${keyField.propertyType}" != "String")
    @JSONField(serializeUsing = org.thenicesys.fastjson.serializer.ToStringSerializer.class)
#end
## 主键
#if(${field.keyIdentityFlag})
    @TableId(value = "${field.name}", type = IdType.AUTO)
#elseif(!$null.isNull(${idType}) && "$!idType" != "")
    @TableId(value = "${field.name}", type = IdType.AUTO)
#elseif(${field.convert})
    @TableId("${field.name}")
#end
#*#if(${field.keyIdentityFlag})
@TableId(value = "${field.name}", type = IdType.AUTO)
#elseif(!$null.isNull(${idType}) && "$!idType" != "")
@TableId(value = "${field.name}", type = IdType.${idType})
#elseif(${field.convert})
@TableId("${field.name}")
#end*#
## 普通字段
#elseif(${field.fill})
## -----   存在字段填充设置   -----
#if(${field.convert})
    @TableField(value = "${field.name}", fill = FieldFill.${field.fill})
#else
    @TableField(fill = FieldFill.${field.fill})
#end
#elseif(${field.convert})
    @TableField("${field.name}")
#end
## 乐观锁注解
#if(${versionFieldName}==${field.name})
    @Version
#end
## 逻辑删除注解
#if(${logicDeleteFieldName}==${field.name})
    @TableLogic
#end
#if(${field.keyFlag})
    private ${field.propertyType} id;
#else
#if(${field.propertyType}=="Date")
#if(${field.fieldType.equals(20)})
    @JSONField(format = "yyyy-MM-dd")
    @DateTimeFormat(pattern = "yyyy-MM-dd")
#else
    @JSONField(format = "yyyy-MM-dd HH:mm:ss")
    @DateTimeFormat(pattern = "yyyy-MM-dd HH:mm:ss")
#end
#end
#if(${field.propertyType}=="Long" || ${field.propertyType}=="BigDecimal")
    @JSONField(serializeUsing = ToStringSerializer.class)
#end
###if(${field.propertyName}=="id")
##    private ${field.propertyType} id;
###else
    private ${field.propertyType} ${field.propertyName};
#if(${field.matchType.equals(7)})
    @TableField(exist = false)
    @ExcelIgnore
#if(${field.propertyType}=="Date")
#if(${field.fieldType.equals(20)})
    @JSONField(format = "yyyy-MM-dd")
    @DateTimeFormat(pattern = "yyyy-MM-dd")
#else
    @JSONField(format = "yyyy-MM-dd HH:mm:ss")
    @DateTimeFormat(pattern = "yyyy-MM-dd HH:mm:ss")
#end
#end
    private ${field.propertyType} ${field.propertyName}BT2;
#end
###end
#end
#else
    @TableField(exist = false)
#if(${field.fieldType.equals(30)})
    ${field.capitalJointable} ${field.propertyName};
#else
    Pager<${field.capitalJointable}> ${field.propertyName};
#end
#end
#end
## ----------  END 字段循环遍历  ----------


    @TableField(exist = false)
    @ExcelIgnore
    private List<Long> pubIds;
    @TableField(exist = false)
    @ExcelIgnore
    private String andOr;
    @TableField(exist = false)
    @ExcelIgnore
    private Integer synctype;

#if(${table.tType} == 0)
#else

#end

#if(!${entityLombokModel})
#foreach($field in ${table.fields})
#if(${field.propertyType.equals("boolean")})
#set($getprefix="is")
#else
#set($getprefix="get")
#end

    public ${field.propertyType} ${getprefix}${field.capitalName}(){
        return ${field.propertyName};
    }

#if(${entityBuilderModel})
    public ${entity} set${field.capitalName}(${field.propertyType} ${field.propertyName}){
#else
    public void set${field.capitalName}(${field.propertyType} ${field.propertyName}) {
#end
        this.${field.propertyName} = ${field.propertyName};
#if(${entityBuilderModel})
        return this;
#end
    }
#end
#end

#if(${entityColumnConstant})
#foreach($field in ${table.fields})
    public static final String ${field.name.toUpperCase()} ="${field.name}";

#end
#end
#if(${activeRecord})
    @Override
    protected Serializable pkVal(){
#if(${keyPropertyName})
        return this.${keyPropertyName};
#else
        return null;
#end
    }

#end
#if(!${entityLombokModel})
@Override
public String toString() {
    return "${entity}{" +
#foreach($field in ${table.fields})
#if($!{velocityCount}==1)
            "${field.propertyName}=" + ${field.propertyName} +
#else
            ", ${field.propertyName}=" + ${field.propertyName} +
#end
#end
        "}";
    }
#end
}
